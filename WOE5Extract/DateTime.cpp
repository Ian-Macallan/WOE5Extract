// DateTime.cpp: implementation of the CDateTime class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "WOE5Extract.h"
#include "DateTime.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

char	*pDay [ 7 ] = {	"Mon", "Twe", "Wed", "Thu", "Fri", "Sat", "Sun" };

char	*pMonth [ 12 ] = {	"Jan", "Feb", "Mar", "Apr", "May", "Jun",
							"Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

//
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
CDateTime::CDateTime()
{
	memset ( szAscTime, 0, sizeof ( szAscTime ) );
}

//
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
CDateTime::~CDateTime()
{

}

//
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
CDateTime::CDateTime(char *pDate)
{
	SetDateTime ( pDate );
}

//
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
bool CDateTime::TestDayOfWeek( char *pDate )
{
	for ( int iX = 0; iX < 7; iX++ )
	{
		if ( strncmp ( pDate, pDay [ iX ], strlen ( pDay [ iX ] ) ) == 0 )
		{
			iDayOfWeek = iX;
			return true;
		}
	}

	iDayOfWeek = -1;
	return false;
}

//
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
char *CDateTime::SkipSpace(char *pDate)
{
	while ( *pDate )
	{
		if ( *pDate != ' ' )
		{
			return pDate;
		}
		pDate++;
	}

	return pDate;
}

//
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
char *CDateTime::SkipNonSpace(char *pDate)
{
	while ( *pDate )
	{
		if ( *pDate == ' ' )
		{
			return pDate;
		}
		pDate++;
	}

	return pDate;
}

//
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
bool CDateTime::TestMonth ( char *pDate )
{
	for ( int iX = 0; iX < 12; iX++ )
	{
		if ( strncmp ( pDate, pMonth [ iX ], strlen ( pMonth [ iX ] ) ) == 0 )
		{
			iMonth = iX;
			return true;
		}
	}

	iMonth = -1;
	return false;
}

//
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
char * CDateTime::GetDateTime()
{
	return szAscTime;
}

//
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
void CDateTime::SetDateTime(char *pDate)
{
	memset ( szAscTime, 0, sizeof ( szAscTime ) );

	if ( TestDayOfWeek ( pDate ) )
	{
		pDate = SkipNonSpace ( pDate );
		pDate = SkipSpace ( pDate );
	}

	iDay = atoi ( pDate );
	pDate = SkipNonSpace ( pDate );
	pDate = SkipSpace ( pDate );

	if ( TestMonth ( pDate ) )
	{
		pDate = SkipNonSpace ( pDate );
		pDate = SkipSpace ( pDate );
	}

	iYear = atoi ( pDate );
	pDate = SkipNonSpace ( pDate );
	pDate = SkipSpace ( pDate );

	sprintf_s ( szAscTime, sizeof ( szAscTime ),
				"%04d/%02d/%02d %s", iYear, iMonth + 1, iDay, pDate );
}
